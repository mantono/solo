buildscript {
    ext.kotlin_version = '1.3-M2'
    ext.jvm_version = '1.8'
    ext.junit_platform_version = '1.1.0'
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://jcenter.bintray.com" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}

plugins {
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC6-4'
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'jacoco'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'idea'
apply from: 'jacoco.gradle'
apply plugin: "org.junit.platform.gradle.plugin"

group = 'com.mantono'
version = '1.1.1'
description = 'Non-synchronized unique ID generator'

defaultTasks 'test'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: '0.25.3-eap13'
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '0.25.3-eap13'
    implementation 'com.github.mantono:pyttipanna:0.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

compileKotlin {
    sourceCompatibility = jvm_version
    kotlinOptions {
        jvmTarget = jvm_version
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileJava {
    sourceCompatibility = jvm_version
    targetCompatibility = jvm_version
    options.incremental = true
    options.encoding = 'UTF-8'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts for faster execution'
    gradleVersion = '4.8'
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}