apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'com.mantono'
version = '1.0.2'
description = 'Distributed unique ID generator'

defaultTasks 'test'

buildscript {
    ext.kotlin_version = '1.2.30'
    ext.jvm_version = '1.8'
    ext.junit_platform_version = '1.1.0'
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://jcenter.bintray.com" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}

apply plugin: "org.junit.platform.gradle.plugin"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://jitpack.io" }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: '0.22.5'
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '0.22.5'
    compile 'com.github.mantono:red-unicorn:bf5fcc95d0'
    compile 'com.github.mantono:pyttipanna:0.1.3'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

junitPlatform {
    platformVersion = junit_platform_version
    filters {
        engines {
            include 'junit-jupiter'
        }
    }
}

compileKotlin {
    sourceCompatibility = jvm_version
    kotlinOptions {
        jvmTarget = jvm_version
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileJava {
    sourceCompatibility = jvm_version
    targetCompatibility = jvm_version
    options.incremental = true
    options.encoding = 'UTF-8'
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts for faster execution'
    gradleVersion = '4.6'
}
