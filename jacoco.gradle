ext {
    detektVersion = '1.0.0.M12.3'
}

ext.coverageExclusions = []

project.tasks.check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            // White list
            excludes = coverageExclusions
            limit {
                minimum = 0.70
            }
        }
    }
}

project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    // configure jacoco to analyze the junitPlatformTest task
    jacoco {
        // this tool version is compatible with
        toolVersion = "0.7.6.201602180812"
        applyTo junitPlatformTestTask
    }

    // create junit platform jacoco task
    project.task(type: JacocoReport, "junitPlatformJacocoReport",
            {
                sourceDirectories = files("./src/")
                classDirectories = files("$buildDir/classes/kotlin/main")
                executionData junitPlatformTestTask
            })
}


jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    executionData = files("$buildDir/jacoco/junitPlatformTest.exec")
    onlyIf = {
        true
    }
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    doFirst {
        new File("$buildDir/classes/main").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}